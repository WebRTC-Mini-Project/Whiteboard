{"version":3,"sources":["whiteboard/view/Whiteboard.tsx","App.tsx","index.tsx"],"names":["Whiteboard","socket","io","useState","tool","setTool","lines","setLines","linesRef","useRef","isDrawing","useEffect","on","data","newLines","current","points","concat","style","border","width","window","innerWidth","height","innerHeight","onMouseDown","e","pos","target","getStage","getPointerPosition","x","y","onMousemove","stage","point","lastLine","length","splice","onMouseup","emit","map","line","i","stroke","strokeWidth","tension","lineCap","globalCompositeOperation","value","onChange","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uNAmGeA,EA5FI,WACjB,IAAMC,EAASC,IAAG,OADK,EAGCC,mBAAS,OAHV,mBAGhBC,EAHgB,KAGVC,EAHU,OAIGF,mBAAc,IAJjB,mBAIhBG,EAJgB,KAITC,EAJS,KAKjBC,EAAWC,iBAAY,IACvBC,EAAYD,kBAAO,GAiDzB,OAlBAE,qBAAU,WACRV,EAAOW,GAAG,OAAO,SAACC,GAGhB,IAAIC,EAAQ,sBACPN,EAASO,SADF,CAEV,CACEX,KAAMS,EAAKT,KACXY,OAAQH,EAAKG,UAIjBT,EAASO,EAASG,UAClBT,EAASO,QAAUD,EAASG,cAE7B,IAID,gCACE,cAAC,IAAD,CACEC,MAAO,CAAEC,OAAQ,iBACjBC,MAAOC,OAAOC,WACdC,OAAQF,OAAOG,YACfC,YArDkB,SAACC,GAA2C,IAAD,EACjEhB,EAAUK,SAAU,EACpB,IAAMY,EAAG,UAAGD,EAAEE,OAAOC,kBAAZ,aAAG,EAAqBC,qBACjCvB,EAAS,GAAD,mBAAKD,GAAL,CAAY,CAAEF,OAAMY,OAAQ,QAACW,QAAD,IAACA,OAAD,EAACA,EAAKI,EAAN,OAASJ,QAAT,IAASA,OAAT,EAASA,EAAKK,QAmD9CC,YAhDkB,SAACP,GACvB,IAA0B,IAAtBhB,EAAUK,QAAd,CAGA,IAAMmB,EAAQR,EAAEE,OAAOC,WACjBM,EAAK,OAAGD,QAAH,IAAGA,OAAH,EAAGA,EAAOJ,qBACjBM,EAAW9B,EAAMA,EAAM+B,OAAS,GAEpCD,EAASpB,OAAT,OAAkBoB,QAAlB,IAAkBA,OAAlB,EAAkBA,EAAUpB,OAAOC,OAAO,QAACkB,QAAD,IAACA,OAAD,EAACA,EAAOJ,EAAR,OAAWI,QAAX,IAAWA,OAAX,EAAWA,EAAOH,IAG5D1B,EAAMgC,OAAOhC,EAAM+B,OAAS,EAAG,EAAGD,GAClC7B,EAASD,EAAMW,UACfT,EAASO,QAAUT,IAoCfiC,UAjCgB,WACpB,IAAMH,EAAyB9B,EAAMA,EAAM+B,OAAS,GACpDpC,EAAOuC,KAAK,MAAOJ,GAEnB1B,EAAUK,SAAU,GAuBlB,SAQE,cAAC,IAAD,UACGT,EAAMmC,KAAI,SAACC,EAAWC,GAAZ,OACT,cAAC,IAAD,CAEE3B,OAAQ0B,EAAK1B,OACb4B,OAAO,UACPC,YAAa,EACbC,QAAS,GACTC,QAAQ,QACRC,yBAAwC,WAAdN,EAAKtC,KAAoB,kBAAoB,eANlEuC,UAWb,yBACEM,MAAO7C,EACP8C,SAAU,SAACxB,GACTrB,EAAQqB,EAAEE,OAAOqB,QAHrB,UAME,wBAAQA,MAAM,MAAd,iBACA,wBAAQA,MAAM,SAAd,2BClFOE,MATf,WACE,OACE,qCACE,oCACA,cAAC,EAAD,QCFNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.2758cb91.chunk.js","sourcesContent":["import Konva from \"konva\";\nimport io from \"socket.io-client\";\nimport { useState, useRef, useEffect } from \"react\";\nimport { Stage, Layer, Line } from \"react-konva\";\n\ntype LastLineType = { tool: string; points: [x: number, y: number] };\n\nconst Whiteboard = () => {\n  const socket = io(\"/wb\");\n\n  const [tool, setTool] = useState(\"pen\");\n  const [lines, setLines] = useState<any>([]);\n  const linesRef = useRef<any>([]);\n  const isDrawing = useRef(false);\n\n  const handleMouseDown = (e: Konva.KonvaEventObject<MouseEvent>) => {\n    isDrawing.current = true;\n    const pos = e.target.getStage()?.getPointerPosition();\n    setLines([...lines, { tool, points: [pos?.x, pos?.y] }]);\n  };\n\n  const handleMouseMove = (e: Konva.KonvaEventObject<MouseEvent>) => {\n    if (isDrawing.current === false) {\n      return;\n    }\n    const stage = e.target.getStage();\n    const point = stage?.getPointerPosition();\n    let lastLine = lines[lines.length - 1];\n    // add point\n    lastLine.points = lastLine?.points.concat([point?.x, point?.y]);\n\n    // replace last\n    lines.splice(lines.length - 1, 1, lastLine);\n    setLines(lines.concat());\n    linesRef.current = lines;\n  };\n\n  const handleMouseUp = () => {\n    const lastLine: LastLineType = lines[lines.length - 1];\n    socket.emit(\"pos\", lastLine);\n\n    isDrawing.current = false;\n  };\n\n  useEffect(() => {\n    socket.on(\"pos\", (data: LastLineType) => {\n      // console.log(`client recived ${JSON.stringify(data)}`);\n\n      let newLines = [\n        ...linesRef.current,\n        {\n          tool: data.tool,\n          points: data.points,\n        },\n      ];\n\n      setLines(newLines.concat());\n      linesRef.current = newLines.concat();\n    });\n  }, []);\n  // console.log(\"local\", lines, \"linesRef\", linesRef.current);\n\n  return (\n    <div>\n      <Stage\n        style={{ border: \"1px red solid\" }}\n        width={window.innerWidth}\n        height={window.innerHeight}\n        onMouseDown={handleMouseDown}\n        onMousemove={handleMouseMove}\n        onMouseup={handleMouseUp}\n      >\n        <Layer>\n          {lines.map((line: any, i: number) => (\n            <Line\n              key={i}\n              points={line.points}\n              stroke=\"#df4b26\"\n              strokeWidth={5}\n              tension={0.5}\n              lineCap=\"round\"\n              globalCompositeOperation={line.tool === \"eraser\" ? \"destination-out\" : \"source-over\"}\n            />\n          ))}\n        </Layer>\n      </Stage>\n      <select\n        value={tool}\n        onChange={(e) => {\n          setTool(e.target.value);\n        }}\n      >\n        <option value=\"pen\">Pen</option>\n        <option value=\"eraser\">Eraser</option>\n      </select>\n    </div>\n  );\n};\n\nexport default Whiteboard;\n","import Whiteboard from \"./whiteboard/view/Whiteboard\";\n\nfunction App() {\n  return (\n    <>\n      <h1>HI</h1>\n      <Whiteboard />\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}